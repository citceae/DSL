尝试的方向：能否提出一种带有obe功能的静态剪枝，在文法构造上关于非终结符的问题通过修改obe的实现解决 换句话说 实现一种新的obe 带有静态剪枝
首先，即使在现在的obe实现下，manual2的编码方式显示是有提升的（展开去掉了+SS并轻微共享-SS和ite）
manual2N5N6相对于初始有提升，并且考虑到obe实现上的问题还可以进一步提升：即考虑直接复用N5N6的结果而不是重新构造
原始：+SS:1376250 -SS:1376250 ite:999824 +5 = 3752329 （参考full.txt 此为S+S完全展开且没有去掉+SS） 
期待的更有的理论结果为：
理论上manual2N5N6: -SS:1257850 ite:880524 +SS:1538978-5 -(-SS的去重结果)-(ite的去重结果) +5
实际上manua2N5N6:-SS:1257850 ite:880524 +SS:1538978 = 3677352  （manual2N5N6.txt）
另外去掉了+SS还使StartBool的构造数目下降了4139758 vs 3784558
“去掉了+SS”指的是 +SS被展开为 +x S|+y S|+z S|+1 S|+(-SS) S|+(ite...) S 删掉了本来按照文法展开会有的+(+SS) S这一项
ps:为什么没有把+ite S也去掉？ 考虑+ (ite B1 S1 S2) (ite B2 S3 S4) ,如果删掉了+ite S那么等价的式子可以是 ite B1 (ite B2 S1+S3 S1+S4) (ite B2 S2+S3 S2+S4) 枚举代价是明显上升的 我好像是没看出来规模相同的等价式子 不过+（-SS）S这一项好像确实可以删掉不影响规模


现在obe实现上的问题：为什么manual2_origin的+SS会被枚举和-SS相同数目的个数？ 见full.txt
理论上此时+SS参与的项都有额外至少1的规模附加 如果是考虑规模为k的Start的产生式 应该考虑规模为k的-SS和规模为k-1的+SS
现在看起来是对所有非终结符都枚举其规模为k的程序 而不是根据它和Start的关系来【重要】
