写完了基本的遗传算法，大概框架如下：
1.初始化种群，种群数量为k，每个个体包含[min,max]个基因，单个基因最大长度为len（即路径的深度）
2.评估个体适应度，即对每个个体对应的DSL计算它能有多少条去重cnt和展开式总长度size，point=cnt-size/(size+常数）
3.按照个体适应度作为权重选择双亲产生k个后代。后代产生方法为父亲或者母亲随机选择自己一半的基因组合出两个个体，随机返回其中一个。如果父亲母亲基因型相同则不做变化直接返回。
4.对每个后代进行变异，变异的种类目前设置如下：
	·加一个随机生成的基因
	·如果基因个数大于min，随机去掉一个基因
	·随机修改一整个基因（等价于不做基因个数检查直接去掉一个再加回一个）
	·随机选中一个基因，如果它的长度大于1，将其最后一位去掉（相当于该条路径深度减一）；如果长度=1，且该个体基因个数大于min，去掉该基因
	·随机选中一个基因，如果它的长度小于len，随机增加最后一位
	·不做处理
5.回到step 2，重复runs轮

参数大概设置：
min=2，需大于2否则交叉产生后代不太方便
len=5，路径最大深度为5
其他参数runs，k，max以及变异的操作可以再讨论，不过max的意义其实不太大因为没有限制最多包含多少个基因（也可以加这个限制，否则很可能就是展开数量最多的得分最高）

gap：评估个体适应度实际上是对对应的DSL做一次去重，目前的去重效率不够，要么尝试之前提过的树状去重，要么考虑有损的只检查长度接近的一些项的检验
需要吉老师那边的函数形式的bug解决了做最后在测试样例上的评估。
强化学习的部分和yzy当时初步的讨论没有得到怎么做的结果，他觉得状态不太清晰，所以我就先把遗传算法写完考虑在此基础之上和他再讨论
