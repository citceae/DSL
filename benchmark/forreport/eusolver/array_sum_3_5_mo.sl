(set-logic LIA)
(synth-fun findSum ( (y1 Int) (y2 Int) (y3 Int) )Int 
((Start Int ( 0 1 2 3 5 y1 y2 y3 
    Startx 
    (ite BoolExpr Start Start))) 
 (ONE Int (1))
 (TWO Int (2))
 (THR Int (3))
 (FIV Int (5))
 (Yone Int (y1))
 (Ytwo Int (y2))
 (Ythr Int (y3))
 (Startx Int (
                (+ ONE ONE)
                (+ ONE TWO)
                (+ ONE THR)
                (+ ONE FIV)
                (+ ONE Yone)
                (+ ONE Ytwo)
                (+ ONE Ythr)
                (+ TWO TWO)
                (+ TWO THR)
                (+ TWO FIV)
                (+ TWO Yone)
                (+ TWO Ytwo)
                (+ TWO Ythr)
                (+ THR THR)
                (+ THR FIV)
                (+ THR Yone)
                (+ THR Ytwo)
                (+ THR Ythr)
                (+ FIV FIV)
                (+ FIV Yone)
                (+ FIV Ytwo)
                (+ FIV Ythr)
                (+ Yone Yone)
                (+ Yone Ytwo)
                (+ Yone Ythr)
                (+ Ytwo Ytwo)
                (+ Ytwo Ythr)
                (+ Ythr Ythr)
                (+ Startx Start)))
 (BoolExpr Bool (
    (< Start Start) 
    (<= Start Start) 
    (> Start Start) 
    (>= Start Start)))))
(declare-var x1 Int)
(declare-var x2 Int)
(declare-var x3 Int)
(constraint (=> (> (+ x1 x2) 5) (= (findSum x1 x2 x3 ) (+ x1 x2))))
(constraint (=> (and (<= (+ x1 x2) 5) (> (+ x2 x3) 5)) (= (findSum x1 x2 x3 ) (+ x2 x3))))
(constraint (=> (and (<= (+ x1 x2) 5) (<= (+ x2 x3) 5)) (= (findSum x1 x2 x3 ) 0)))
(check-synth)
