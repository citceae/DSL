(set-logic LIA)

(define-fun func1 ((X Int) (a1 Int) ) Int (+ X a1 ))
(define-fun func2 ((Y Int) (a1 Int) ) Int (+ Y a1 ))
(define-fun func3 ((Z Int) (a1 Int) ) Int (+ Z a1 ))
(define-fun func4 ((a1 Int) ) Int (+ 0 a1 ))
(define-fun func5 ((a1 Int) ) Int (+ 1 a1 ))
(define-fun func6 ((a1 Int) (a2 Int) (a3 Int) ) Int (+ (+ a1 a2 )a3 ))
(define-fun func7 ((a1 Int) (a2 Int) (a3 Int) ) Int (+ (- a1 a2 )a3 ))
(define-fun func8 ((b1 Bool) (a1 Int) (a2 Int) (a3 Int) ) Int (+ (ite b1 a1 a2 )a3 ))
(define-fun func9 ((X Int) (a1 Int) ) Int (- X a1 ))
(define-fun func10 ((Y Int) (a1 Int) ) Int (- Y a1 ))
(define-fun func11 ((Z Int) (a1 Int) ) Int (- Z a1 ))
(define-fun func12 ((a1 Int) ) Int (- 0 a1 ))
(define-fun func13 ((a1 Int) ) Int (- 1 a1 ))
(define-fun func14 ((a1 Int) (a2 Int) (a3 Int) ) Int (- (- a1 a2 )a3 ))
(define-fun func15 ((b1 Bool) (a1 Int) (a2 Int) (a3 Int) ) Int (- (ite b1 a1 a2 )a3 ))
(define-fun func16 ((b1 Bool) (b2 Bool) (a1 Int) (a2 Int) ) Int (ite (and b1 b2 )a1 a2 ))
(define-fun func17 ((b1 Bool) (b2 Bool) (a1 Int) (a2 Int) ) Int (ite (or b1 b2 )a1 a2 ))
(define-fun func18 ((b1 Bool) (a1 Int) (a2 Int) ) Int (ite (not b1 )a1 a2 ))
(define-fun func19 ((a1 Int) (a2 Int) (a3 Int) (a4 Int) ) Int (ite (< a1 a2 )a3 a4 ))
(define-fun func20 ((a1 Int) (a2 Int) (a3 Int) (a4 Int) ) Int (ite (= a1 a2 )a3 a4 ))
(define-fun func21 ((b1 Bool) (b2 Bool) (b3 Bool) ) Bool (and (and b1 b2 )b3 ))
(define-fun func22 ((b1 Bool) (b2 Bool) (b3 Bool) ) Bool (and (or b1 b2 )b3 ))
(define-fun func23 ((b1 Bool) (b2 Bool) ) Bool (and (not b1 )b2 ))
(define-fun func24 ((a1 Int) (a2 Int) (b1 Bool) ) Bool (and (< a1 a2 )b1 ))
(define-fun func25 ((a1 Int) (a2 Int) (b1 Bool) ) Bool (and (= a1 a2 )b1 ))
(define-fun func26 ((a1 Int) (a2 Int) (b1 Bool) ) Bool (and (<= a1 a2 )b1 ))
(define-fun func27 ((b1 Bool) (b2 Bool) (b3 Bool) ) Bool (or (and b1 b2 )b3 ))
(define-fun func28 ((b1 Bool) (b2 Bool) (b3 Bool) ) Bool (or (or b1 b2 )b3 ))
(define-fun func29 ((b1 Bool) (b2 Bool) ) Bool (or (not b1 )b2 ))
(define-fun func30 ((a1 Int) (a2 Int) (b1 Bool) ) Bool (or (< a1 a2 )b1 ))
(define-fun func31 ((a1 Int) (a2 Int) (b1 Bool) ) Bool (or (= a1 a2 )b1 ))
(define-fun func32 ((a1 Int) (a2 Int) (b1 Bool) ) Bool (or (<= a1 a2 )b1 ))
(define-fun func33 ((b1 Bool) (b2 Bool) ) Bool (not (and b1 b2 )))
(define-fun func34 ((b1 Bool) (b2 Bool) ) Bool (not (or b1 b2 )))
(define-fun func35 ((b1 Bool) ) Bool (not (not b1 )))
(define-fun func36 ((a1 Int) (a2 Int) ) Bool (not (< a1 a2 )))
(define-fun func37 ((a1 Int) (a2 Int) ) Bool (not (= a1 a2 )))
(define-fun func38 ((a1 Int) (a2 Int) ) Bool (not (<= a1 a2 )))
(define-fun func39 ((X Int) (a1 Int) ) Bool (< X a1 ))
(define-fun func40 ((Y Int) (a1 Int) ) Bool (< Y a1 ))
(define-fun func41 ((Z Int) (a1 Int) ) Bool (< Z a1 ))
(define-fun func42 ((a1 Int) ) Bool (< 0 a1 ))
(define-fun func43 ((a1 Int) ) Bool (< 1 a1 ))
(define-fun func44 ((a1 Int) (a2 Int) (a3 Int) ) Bool (< (+ a1 a2 )a3 ))
(define-fun func45 ((a1 Int) (a2 Int) (a3 Int) ) Bool (< (- a1 a2 )a3 ))
(define-fun func46 ((b1 Bool) (a1 Int) (a2 Int) (a3 Int) ) Bool (< (ite b1 a1 a2 )a3 ))
(define-fun func47 ((X Int) (a1 Int) ) Bool (= X a1 ))
(define-fun func48 ((Y Int) (a1 Int) ) Bool (= Y a1 ))
(define-fun func49 ((Z Int) (a1 Int) ) Bool (= Z a1 ))
(define-fun func50 ((a1 Int) ) Bool (= 0 a1 ))
(define-fun func51 ((a1 Int) ) Bool (= 1 a1 ))
(define-fun func52 ((a1 Int) (a2 Int) (a3 Int) ) Bool (= (+ a1 a2 )a3 ))
(define-fun func53 ((b1 Bool) (a1 Int) (a2 Int) (a3 Int) ) Bool (= (ite b1 a1 a2 )a3 ))
(define-fun func54 ((X Int) (a1 Int) ) Bool (<= X a1 ))
(define-fun func55 ((Y Int) (a1 Int) ) Bool (<= Y a1 ))
(define-fun func56 ((Z Int) (a1 Int) ) Bool (<= Z a1 ))
(define-fun func57 ((a1 Int) ) Bool (<= 0 a1 ))
(define-fun func58 ((a1 Int) (a2 Int) (a3 Int) ) Bool (<= (+ a1 a2 )a3 ))
(define-fun func59 ((a1 Int) (a2 Int) (a3 Int) ) Bool (<= (- a1 a2 )a3 ))
(define-fun func60 ((b1 Bool) (a1 Int) (a2 Int) (a3 Int) ) Bool (<= (ite b1 a1 a2 )a3 ))
(synth-fun eq1 ( (x Int) (y Int) (z Int) ) Int
    ((Start Int (x
                 y
                 z
                 0
                 1
                (func1 X Start )
		(func2 Y Start )
		(func3 Z Start )
		(func4 Start )
		(func5 Start )
		(func6 Start Start Start )
		(func7 Start Start Start )
		(func8 StartBool Start Start Start )
		(func9 X Start )
		(func10 Y Start )
		(func11 Z Start )
		(func12 Start )
		(func13 Start )
		(func14 Start Start Start )
		(func15 StartBool Start Start Start )
		(func16 StartBool StartBool Start Start )
		(func17 StartBool StartBool Start Start )
		(func18 StartBool Start Start )
		(func19 Start Start Start Start )
		(func20 Start Start Start Start )
                 ))
     (X Int (x))
     (Y Int (y))
     (Z Int (z))
     (StartBool Bool ((func21 StartBool StartBool StartBool )
			(func22 StartBool StartBool StartBool )
			(func23 StartBool StartBool )
			(func24 Start Start StartBool )
			(func25 Start Start StartBool )
			(func26 Start Start StartBool )
			(func27 StartBool StartBool StartBool )
			(func28 StartBool StartBool StartBool )
			(func29 StartBool StartBool )
			(func30 Start Start StartBool )
			(func31 Start Start StartBool )
			(func32 Start Start StartBool )
			(func33 StartBool StartBool )
			(func34 StartBool StartBool )
			(func35 StartBool )
			(func36 Start Start )
			(func37 Start Start )
			(func38 Start Start )
			(func39 X Start )
			(func40 Y Start )
			(func41 Z Start )
			(func42 Start )
			(func43 Start )
			(func44 Start Start Start )
			(func45 Start Start Start )
			(func46 StartBool Start Start Start )
			(func47 X Start )
			(func48 Y Start )
			(func49 Z Start )
			(func50 Start )
			(func51 Start )
			(func52 Start Start Start )
			(func53 StartBool Start Start Start )
			(func54 X Start )
			(func55 Y Start )
			(func56 Z Start )
			(func57 Start )
			(func58 Start Start Start )
			(func59 Start Start Start )
			(func60 StartBool Start Start Start )
                      ))))

(define-fun iteB (( b1 Bool ) (b2 Bool ) (b3 Bool )) Bool ( or ( and b1 b2 ) ( and (not b1 ) b3 ) ) )
(define-fun plus2 ((b1 Int) (b2 Int)) Int ( + b1 b2))
(define-fun plus3 ((b1 Int) (b2 Int) (b3 Int)) Int ( +  ( + b1 b2) b3))
(define-fun plus4 ((b1 Int) (b2 Int) (b3 Int) (b4 Int)) Int ( +  ( plus3  b1 b2 b3) b4))
(define-fun plus5 ((b1 Int) (b2 Int) (b3 Int) (b4 Int) (b5 Int)) Int (+  ( plus4 b1 b2 b3 b4) b5))
(define-fun plus6 ((b1 Int) (b2 Int) (b3 Int) (b4 Int) (b5 Int) (b6 Int) ) Int (+  ( plus5 b1 b2 b3 b4  b5) b6  ))
(define-fun plus7 ((b1 Int) (b2 Int) (b3 Int) (b4 Int) (b5 Int) (b6 Int) (b7 Int)) Int (+  ( plus6 b1 b2 b3 b4  b5 b6 ) b7  ))
(define-fun plus8 ((b1 Int) (b2 Int) (b3 Int) (b4 Int) (b5 Int) (b6 Int) (b7 Int) (be Int)) Int (+  ( plus7 b1 b2 b3 b4  b5 b6 b7) be  ))
(define-fun plus9 ((b1 Int) (b2 Int) (b3 Int) (b4 Int) (b5 Int) (b6 Int) (b7 Int) (be Int) (bn Int)) Int (+  ( plus8 b1 b2 b3 b4  b5 b6 b7 be) bn  ))

(define-fun or3 ((b1 Bool) (b2 Bool) (b3 Bool)) Bool ( or ( or b1 b2) b3))
(define-fun one-times  ((b1 Int )) Int b1)
(define-fun two-times  ((b1 Int )) Int ( plus2 b1 b1))
(define-fun three-times  ((b1 Int )) Int ( plus3 b1 b1 b1))
(define-fun five-times  ((b1 Int )) Int ( plus5 b1 b1 b1 b1 b1 ))
(define-fun seven-times ((b1 Int )) Int ( plus7 b1 b1 b1 b1 b1 b1 b1 ))
(define-fun nine-times  ((b1 Int )) Int ( plus9 b1 b1 b1 b1 b1 b1 b1 b1 b1))
(define-fun ten-times  ((b1 Int )) Int ( plus9 b1 b1 b1 b1 b1 b1 b1 b1 ( plus2 b1 b1 )))
(define-fun minus ((b1 Int)) Int ( - 0  b1 ))

(declare-var x Int ) 
(declare-var y Int ) 
(declare-var z Int ) 

( constraint ( 
                     = ( eq1 x y z) ( plus3 x y z) 
		    
             )
)      


(check-synth)

