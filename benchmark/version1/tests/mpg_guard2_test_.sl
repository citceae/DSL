(set-logic LIA)

(synth-fun eq1 ( (x Int) (y Int) (z Int) ) Int

((Start Int (
        0
        1
        x
        y
        z
        (+ N1 Start)
        (+ N2 Start)
        (+ N3 Start)
        (+ N4 N2)
        (+ N4 N3)
        (+ N4 N4)
        (+ N4 N5)
        (+ N5 Start)
        (+ N6 N1)
        (+ N6 N2)
        (+ N6 N3)
        (+ N6 N4)
        (+ N6 N5)
        (+ N7 N1)
        (+ N8 N1)
        (+ N9 N1)
        (+ N10 N1)
        (+ N11 N2)
        (+ N11 N3)
        (+ N11 N4)
        (+ N11 N5)
        (+ N12 N1)
        (+ N13 N2)
        (+ N13 N3)
        (+ N13 N5)
        (+ N6 N6)
        (+ N6 N11)
        (+ N14 N1)
        (+ N15 N1)
        (+ N11 N11)
        (+ N6 N13)
        (+ N11 N13)
        (+ N16 N4)
        (+ N17 N4)
        (+ N18 N4)
        (+ N19 N4)
        (+ N20 N4)
        (+ N21 N4)
        (+ N22 N4)
        (+ N23 N4)
        (+ N4 N24)
        (+ N4 N25)
        (+ N4 N26)
        (+ N4 N27)
        (+ N4 N28)
        (+ N29 N4)
        (+ N13 N13)
        (+ N30 N1)
        (+ N31 N1)
        (+ N32 N1)
        (+ N33 N1)
        (+ N34 N4)
        (+ N35 N4)
        (+ N4 N36)
        (+ N4 N37)
        (+ N38 N1)
        (+ N39 N4)
        (+ N4 N40)
        (- N1 Start)
        (- N2 Start)
        (- N3 Start)
        (- N4 N2)
        (- N4 N3)
        (- N4 N5)
        (- N5 Start)
        (- N6 N2)
        (- N6 N3)
        (- N6 N4)
        (- N6 N5)
        (- N41 N1)
        (- N42 N1)
        (- N43 N1)
        (- N44 N1)
        (- N45 N1)
        (- N11 Start)
        (- N4 N46)
        (- N4 N47)
        (- N4 N48)
        (- N13 Start)
        (- N4 N13)
        (- N49 N1)
        (- N4 N49)
        (- N4 N50)
        (- N51 N1)
        (- N6 N13)
        (- N4 N51)
        (ite StartBool Start Start)
        ))
(StartBool Bool (
        (< Start Start)
        (= Start Start)
        (not StartBool)
        (<= Start Start)
        (or StartBool StartBool)
        (and StartBool StartBool)
        ))
(N1 Int (0))
(N2 Int (1))
(N3 Int (x))
(N4 Int (y))
(N5 Int (z))
(N6 Int ((+ Start Start)))
(N7 Int ((- N2 N1)))
(N8 Int ((- N2 N3)))
(N9 Int ((- N2 N4)))
(N10 Int ((- N2 N5)))
(N11 Int ((- Start Start)))
(N12 Int ((- N4 Start)))
(N13 Int ((ite  StartBool Start Start)))
(N14 Int ((- N6 Start)))
(N15 Int ((- N2 N6)))
(N16 Int ((ite  N52 Start Start)))
(N17 Int ((ite  N53 Start Start)))
(N18 Int ((ite  N54 Start Start)))
(N19 Int ((ite  N55 N1 Start)))
(N20 Int ((ite  N55 N2 Start)))
(N21 Int ((ite  N55 N3 Start)))
(N22 Int ((ite  N55 N4 Start)))
(N23 Int ((ite  N55 N5 Start)))
(N24 Int ((ite  N55 N2 N1)))
(N25 Int ((ite  N55 N2 N2)))
(N26 Int ((ite  N55 N2 N3)))
(N27 Int ((ite  N55 N2 N4)))
(N28 Int ((ite  N55 N2 N5)))
(N29 Int ((ite  N56 Start Start)))
(N30 Int ((- N2 N16)))
(N31 Int ((- N2 N17)))
(N32 Int ((- N2 N18)))
(N33 Int ((- N2 N57)))
(N34 Int ((ite  N55 N6 Start)))
(N35 Int ((ite  N55 N11 Start)))
(N36 Int ((ite  N55 N2 N6)))
(N37 Int ((ite  N55 N2 N11)))
(N38 Int ((- N2 N29)))
(N39 Int ((ite  N55 N13 Start)))
(N40 Int ((ite  N55 N2 N13)))
(N41 Int ((+ N4 Start)))
(N42 Int ((+ N5 N1)))
(N43 Int ((+ N5 N2)))
(N44 Int ((+ N5 N3)))
(N45 Int ((+ N5 N5)))
(N46 Int ((+ N2 Start)))
(N47 Int ((+ N3 Start)))
(N48 Int ((+ N5 Start)))
(N49 Int ((+ N6 Start)))
(N50 Int ((+ N11 Start)))
(N51 Int ((+ N13 Start)))
(N52 Bool ((< Start Start)))
(N53 Bool ((= Start Start)))
(N54 Bool ((not StartBool)))
(N55 Bool ((or StartBool StartBool)))
(N56 Bool ((and StartBool StartBool)))
(N57 Int ((ite  N55 Start Start)))
))

(define-fun iteB (( b1 Bool ) (b2 Bool ) (b3 Bool )) Bool ( or ( and b1 b2 ) ( and (not b1 ) b3 ) ) )
(define-fun plus2 ((b1 Int) (b2 Int)) Int ( + b1 b2))
(define-fun plus3 ((b1 Int) (b2 Int) (b3 Int)) Int ( +  ( + b1 b2) b3))
(define-fun plus4 ((b1 Int) (b2 Int) (b3 Int) (b4 Int)) Int ( +  ( plus3  b1 b2 b3) b4))
(define-fun plus5 ((b1 Int) (b2 Int) (b3 Int) (b4 Int) (b5 Int)) Int (+  ( plus4 b1 b2 b3 b4) b5))
(define-fun plus6 ((b1 Int) (b2 Int) (b3 Int) (b4 Int) (b5 Int) (b6 Int) ) Int (+  ( plus5 b1 b2 b3 b4  b5) b6  ))
(define-fun plus7 ((b1 Int) (b2 Int) (b3 Int) (b4 Int) (b5 Int) (b6 Int) (b7 Int)) Int (+  ( plus6 b1 b2 b3 b4  b5 b6 ) b7  ))
(define-fun plus8 ((b1 Int) (b2 Int) (b3 Int) (b4 Int) (b5 Int) (b6 Int) (b7 Int) (be Int)) Int (+  ( plus7 b1 b2 b3 b4  b5 b6 b7) be  ))
(define-fun plus9 ((b1 Int) (b2 Int) (b3 Int) (b4 Int) (b5 Int) (b6 Int) (b7 Int) (be Int) (bn Int)) Int (+  ( plus8 b1 b2 b3 b4  b5 b6 b7 be) bn  ))

(define-fun or3 ((b1 Bool) (b2 Bool) (b3 Bool)) Bool ( or ( or b1 b2) b3))
(define-fun one-times  ((b1 Int )) Int b1)
(define-fun two-times  ((b1 Int )) Int ( plus2 b1 b1))
(define-fun three-times  ((b1 Int )) Int ( plus3 b1 b1 b1))
(define-fun five-times  ((b1 Int )) Int ( plus5 b1 b1 b1 b1 b1 ))
(define-fun seven-times ((b1 Int )) Int ( plus7 b1 b1 b1 b1 b1 b1 b1 ))
(define-fun nine-times  ((b1 Int )) Int ( plus9 b1 b1 b1 b1 b1 b1 b1 b1 b1))
(define-fun ten-times  ((b1 Int )) Int ( plus9 b1 b1 b1 b1 b1 b1 b1 b1 ( plus2 b1 b1 )))
(define-fun minus ((b1 Int)) Int ( - 0  b1 ))

(declare-var x Int ) 
(declare-var y Int ) 
(declare-var z Int ) 



( constraint ( iteB ( >= (plus3 x y z ) 1 ) 
                    ( = ( eq1 x y z) ( plus2 x  y    ) )
		    ( = ( eq1 x y z) ( plus2 x  (minus y)   ) )
             )
)      


(check-synth)
